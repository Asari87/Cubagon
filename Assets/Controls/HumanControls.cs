//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Controls/HumanControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HumanControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HumanControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HumanControls"",
    ""maps"": [
        {
            ""name"": ""HumanPlayer"",
            ""id"": ""e2307370-f020-45a6-bd5b-75aabbe7db2b"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""0f795407-338f-46f2-964f-7e73f529297b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPoint"",
                    ""type"": ""Value"",
                    ""id"": ""cf1a312a-3bb9-47a8-94b0-1f5bb99dbfca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8e0e10c-3064-488f-b334-a1b840e5f261"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c555c2e6-243c-4c64-8582-b930462e73a8"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b3dca59-a496-4692-82bb-769067530276"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c967b2cc-73da-4ba0-a721-9a2528c89617"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HumanPlayer
        m_HumanPlayer = asset.FindActionMap("HumanPlayer", throwIfNotFound: true);
        m_HumanPlayer_Tap = m_HumanPlayer.FindAction("Tap", throwIfNotFound: true);
        m_HumanPlayer_ScreenPoint = m_HumanPlayer.FindAction("ScreenPoint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HumanPlayer
    private readonly InputActionMap m_HumanPlayer;
    private List<IHumanPlayerActions> m_HumanPlayerActionsCallbackInterfaces = new List<IHumanPlayerActions>();
    private readonly InputAction m_HumanPlayer_Tap;
    private readonly InputAction m_HumanPlayer_ScreenPoint;
    public struct HumanPlayerActions
    {
        private @HumanControls m_Wrapper;
        public HumanPlayerActions(@HumanControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_HumanPlayer_Tap;
        public InputAction @ScreenPoint => m_Wrapper.m_HumanPlayer_ScreenPoint;
        public InputActionMap Get() { return m_Wrapper.m_HumanPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IHumanPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_HumanPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HumanPlayerActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @ScreenPoint.started += instance.OnScreenPoint;
            @ScreenPoint.performed += instance.OnScreenPoint;
            @ScreenPoint.canceled += instance.OnScreenPoint;
        }

        private void UnregisterCallbacks(IHumanPlayerActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @ScreenPoint.started -= instance.OnScreenPoint;
            @ScreenPoint.performed -= instance.OnScreenPoint;
            @ScreenPoint.canceled -= instance.OnScreenPoint;
        }

        public void RemoveCallbacks(IHumanPlayerActions instance)
        {
            if (m_Wrapper.m_HumanPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHumanPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_HumanPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HumanPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HumanPlayerActions @HumanPlayer => new HumanPlayerActions(this);
    public interface IHumanPlayerActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnScreenPoint(InputAction.CallbackContext context);
    }
}
